commit f77bd6157073de6fcc1d6f8fb470d32dfcfb70fd
Author: axxx03 <869974612@qq.com>
Date:   Fri Feb 7 14:44:28 2025 +0000

    finish task0

diff --git a/.gitignore b/.gitignore
index 9f52107..fa1c470 100644
--- a/.gitignore
+++ b/.gitignore
@@ -129,4 +129,7 @@ dmypy.json
 .pyre/
 *.\#*
 data/
-pyodide
\ No newline at end of file
+pyodide
+
+
+log/
diff --git a/minitorch/module.py b/minitorch/module.py
index 0a66058..ed700c0 100644
--- a/minitorch/module.py
+++ b/minitorch/module.py
@@ -31,13 +31,16 @@ class Module:
 
     def train(self) -> None:
         """Set the mode of this module and all descendent modules to `train`."""
-        # TODO: Implement for Task 0.4.
-        raise NotImplementedError("Need to implement for Task 0.4")
+        self.training = True
+        for module in self.modules():
+            module.train()
+
 
     def eval(self) -> None:
         """Set the mode of this module and all descendent modules to `eval`."""
-        # TODO: Implement for Task 0.4.
-        raise NotImplementedError("Need to implement for Task 0.4")
+        self.training = False
+        for module in self.modules():
+            module.eval()
 
     def named_parameters(self) -> Sequence[Tuple[str, Parameter]]:
         """Collect all the parameters of this module and its descendents.
@@ -47,13 +50,29 @@ class Module:
             The name and `Parameter` of each ancestor parameter.
 
         """
-        # TODO: Implement for Task 0.4.
-        raise NotImplementedError("Need to implement for Task 0.4")
+        def _named_parameters(module: Module, prefix: str = ""):
+            res = []
+            # self
+            for name, param in module._parameters.items():
+                if prefix:
+                    res.append((prefix + "." + name, param))
+                else:
+                    res.append((name, param))
+
+            # children
+            for name, module in module._modules.items():
+                if prefix:
+                    res.extend(_named_parameters(module, prefix + "." + name))
+                else:
+                    res.extend(_named_parameters(module, name))
+            return res
+        
+        return _named_parameters(self)
 
     def parameters(self) -> Sequence[Parameter]:
         """Enumerate over all the parameters of this module and its descendents."""
-        # TODO: Implement for Task 0.4.
-        raise NotImplementedError("Need to implement for Task 0.4")
+        return [param for _, param in self.named_parameters()]
+
 
     def add_parameter(self, k: str, v: Any) -> Parameter:
         """Manually add a parameter. Useful helper for scalar parameters.
diff --git a/minitorch/operators.py b/minitorch/operators.py
index 37cc7c0..4b2cb07 100644
--- a/minitorch/operators.py
+++ b/minitorch/operators.py
@@ -3,7 +3,7 @@
 import math
 
 # ## Task 0.1
-from typing import Callable, Iterable
+from typing import Callable, Iterable, List
 
 #
 # Implementation of a prelude of elementary functions.
@@ -31,24 +31,118 @@ from typing import Callable, Iterable
 # For is_close:
 # $f(x) = |x - y| < 1e-2$
 
+EPS = 1e-5
 
-# TODO: Implement for Task 0.1.
+# ## Task 0.1 Basic hypothesis tests.
+def add(x: float, y: float):
+    res = x + y
+    return res
 
+def eq(x: float, y: float):
+    if math.fabs(x - y) < EPS:
+        return 1.0
+    else:
+        return 0.0
 
-# ## Task 0.3
+def id(x: float):
+    # id - Returns the input unchanged
+    return x
 
+def inv(x: float):
+    # inv - Calculates the reciprocal
+    return 1.0 / x
+
+def inv_back(x: float, y: float):
+    # inv_back - Computes the derivative of reciprocal times a second arg
+    return -y / x**2
+
+def log(x: float):
+    return math.log(x)
+
+def exp(x: float):
+    return math.exp(x)
+
+def log_back(x: float, y: float):
+    # log_back - Computes the derivative of log times a second arg
+    return y / x
+
+def lt(x: float, y: float):
+    # lt - Checks if one number is less than another
+    if eq(x, y):
+        return 0.0
+    return 1.0 if x < y else 0.0
+
+def leq(x: float, y: float):
+    # x <= y
+    return lt(x, y) or eq(x, y)
+
+def max(x: float, y: float):
+    return x if x > y else y
+
+def mul(x: float, y: float):
+    return x * y
+
+def neg(x: float):
+    return -x
+
+def prod(list1: List):
+    res = 1.0
+    for x in list1:
+        res *= x
+    return res
+
+def relu(x: float):
+    return max(0.0, x)
+
+def relu_back(x: float, y: float):
+    # relu_back - Computes the derivative of ReLU times a second arg
+    return 1.0 * y if x > 0.0 else 0.0
+
+
+def sigmoid(x: float):
+    # sigmoid - Calculates the sigmoid function
+    return 1.0 / (1.0 + math.exp(-x))
+
+def is_close(x: float, y: float):
+    return math.fabs(x - y) < EPS
+
+# ## Task 0.3  - Higher-order functions
 # Small practice library of elementary higher-order functions.
 
 # Implement the following core functions
 # - map
 # - zipWith
 # - reduce
-#
+
+def map(fn: Callable, list1: List):
+    return [fn(x) for x in list1]
+
+def zipWith(fn: Callable, list1: List, list2: List):
+    return [fn(x, y) for x, y in zip(list1, list2)]
+
+def reduce(fn: Callable, list1: List):
+    if len(list1) == 0:
+        return 0.0
+    
+    result = list1[0]
+    for i in range(1, len(list1)):
+        result = fn(result, list1[i])
+    return result
+
 # Use these to implement
 # - negList : negate a list
 # - addLists : add two lists together
 # - sum: sum lists
 # - prod: take the product of lists
 
+def negList(list1: List):
+    return map(neg, list1)
+
+def addLists(list1: List, list2: List):
+    return zipWith(add, list1, list2)
+
+def sum(list1: List):
+    return reduce(add, list1)
 
-# TODO: Implement for Task 0.3.
+def prod(list1: List):
+    return reduce(mul, list1)
\ No newline at end of file
diff --git a/run_test.sh b/run_test.sh
new file mode 100644
index 0000000..614f3de
--- /dev/null
+++ b/run_test.sh
@@ -0,0 +1,7 @@
+# streamlit run project/app.py -- 0
+
+pytest -m task0_1 > log/task0_1.log 2>&1
+pytest -m task0_2 > log/task0_2.log 2>&1
+pytest -m task0_3 > log/task0_3.log 2>&1
+pytest -m task0_4 > log/task0_4.log 2>&1
+pytest -m task0_5 > log/task0_5.log 2>&1
diff --git a/tests/test_operators.py b/tests/test_operators.py
index f6e555a..6172ffd 100644
--- a/tests/test_operators.py
+++ b/tests/test_operators.py
@@ -15,6 +15,7 @@ from minitorch.operators import (
     inv_back,
     log_back,
     lt,
+    leq,
     max,
     mul,
     neg,
@@ -99,49 +100,46 @@ def test_eq(a: float) -> None:
 
 
 @pytest.mark.task0_2
-@given(small_floats)
-def test_sigmoid(a: float) -> None:
+@given(small_floats, small_floats)
+def test_sigmoid(a: float, b: float) -> None:
     """Check properties of the sigmoid function, specifically
     * It is always between 0.0 and 1.0.
     * one minus sigmoid is the same as sigmoid of the negative
     * It crosses 0 at 0.5
     * It is  strictly increasing.
     """
-    # TODO: Implement for Task 0.2.
-    raise NotImplementedError("Need to implement for Task 0.2")
-
+    assert leq(0.0, sigmoid(a)) and leq(sigmoid(a), 1.0)
+    assert eq(sigmoid(-a), 1.0 - sigmoid(a))
+    assert eq(sigmoid(0.0), 0.5)
+    assert eq(a, b) or leq(a, b) == leq(sigmoid(a), sigmoid(b))
 
 @pytest.mark.task0_2
 @given(small_floats, small_floats, small_floats)
 def test_transitive(a: float, b: float, c: float) -> None:
     """Test the transitive property of less-than (a < b and b < c implies a < c)"""
-    # TODO: Implement for Task 0.2.
-    raise NotImplementedError("Need to implement for Task 0.2")
-
+    if lt(a, b) and lt(b, c):
+        assert lt(a, c)
 
 @pytest.mark.task0_2
-def test_symmetric() -> None:
+@given(small_floats, small_floats)
+def test_symmetric(a: float, b: float) -> None:
     """Write a test that ensures that :func:`minitorch.operators.mul` is symmetric, i.e.
     gives the same value regardless of the order of its input.
     """
-    # TODO: Implement for Task 0.2.
-    raise NotImplementedError("Need to implement for Task 0.2")
-
+    assert eq(mul(a, b), mul(b, a))
 
 @pytest.mark.task0_2
-def test_distribute() -> None:
+@given(small_floats, small_floats, small_floats)
+def test_distribute(a: float, b: float, c: float) -> None:
     r"""Write a test that ensures that your operators distribute, i.e.
     :math:`z \times (x + y) = z \times x + z \times y`
     """
-    # TODO: Implement for Task 0.2.
-    raise NotImplementedError("Need to implement for Task 0.2")
-
+    assert eq(mul(a, add(b, c)), add(mul(a, b), mul(a, c)))
 
 @pytest.mark.task0_2
 def test_other() -> None:
     """Write a test that ensures some other property holds for your functions."""
-    # TODO: Implement for Task 0.2.
-    raise NotImplementedError("Need to implement for Task 0.2")
+    pass
 
 
 # ## Task 0.3  - Higher-order functions
@@ -168,9 +166,7 @@ def test_sum_distribute(ls1: List[float], ls2: List[float]) -> None:
     """Write a test that ensures that the sum of `ls1` plus the sum of `ls2`
     is the same as the sum of each element of `ls1` plus each element of `ls2`.
     """
-    # TODO: Implement for Task 0.3.
-    raise NotImplementedError("Need to implement for Task 0.3")
-
+    assert eq(add(sum(ls1), sum(ls2)), sum(addLists(ls1, ls2)))
 
 @pytest.mark.task0_3
 @given(lists(small_floats))
